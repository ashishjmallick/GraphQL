/*
 *  @Author: Ashish Mallick
 *  linkedIn : https://www.linkedin.com/in/ashish-mallick
 */


package com.ashish.GraphQLwithSpringBoot.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ashish.GraphQLwithSpringBoot.Output.Cast;
import com.ashish.GraphQLwithSpringBoot.Output.Movie;
import com.ashish.GraphQLwithSpringBoot.Repository.MovieRepository;

import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;


@EnableJpaRepositories
@RestController
public class MovieController {

	@Autowired
	private MovieRepository movieRepository; 	
	
	private Movie movie1;
	private Movie movie2;
	private Movie movie3;
	private Movie movie4;
	private Movie movie5;
	private List<Movie> movieList;

	private void initializeMovies() {

		Cast cast = new Cast(12, "ABC", "New York", 18);
		Cast[] castList = {cast};
		movie1 = new Movie(101, "Frozen", "U", 6.7, castList); 
		/*
		 * movie2 = new Movie(103, "Avengers - The End Game", "U/A", 7.3, cast); movie3
		 * = new Movie(107, "Fifty Shades of Grey", "A", 8, cast); movie4 = new
		 * Movie(109, "A Beautiful House", "U", 8.6, cast); movie5 = new Movie(110,
		 * "Andhadhun","U/A", 9, cast);
		 */

		movieList = new ArrayList<Movie>();
		movieList.addAll(movieList);

	}
	
	private void loadAllInHSQL() {
		movieRepository.saveAll(movieList);
	}
	
	private GraphQL  graphQL;
	
	@Value("classpath:movie.graphqls")
	private Resource schemaResource;
	
	
	
	
	@PostConstruct
	public void loadSchema() throws IOException {
		initializeMovies();
		loadAllInHSQL();
		File schemaFile = schemaResource.getFile();
		TypeDefinitionRegistry  typedefRegistry = new SchemaParser().parse(schemaFile);
		RuntimeWiring runtimeWiring = buildWiring();
		GraphQLSchema graphQLSchema = new SchemaGenerator().makeExecutableSchema(typedefRegistry, runtimeWiring);
		graphQL = GraphQL.newGraphQL(graphQLSchema).build();
	}
	
	
	private RuntimeWiring buildWiring() {
		DataFetcher<List<Movie>> allMovieDataFetcher = data ->{
			return (List<Movie>)movieRepository.findAll();
		};
		DataFetcher<Movie> findMovieDataFetcher = data ->{
			return (Movie) movieRepository.findMovie(data.getArgument("movieName"));
		};
		
		return RuntimeWiring.newRuntimeWiring().
				type("Query", 
						  typeWriting -> typeWriting.dataFetcher("getAllMovieData", allMovieDataFetcher)
						  							.dataFetcher("findMovie", findMovieDataFetcher)
						 ).build();
		
	}
	
	@PostMapping("/getAllMovieData")
	public ResponseEntity<List<Movie>> getAllMovieData(@RequestBody String query){
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<List<Movie>>((List<Movie>) result, HttpStatus.OK);
		
	}
	
	@PostMapping("/findMovie")
	public ResponseEntity<Movie> findMovie(@RequestBody String query){
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<Movie>((Movie) result, HttpStatus.OK);
		
	}
	
	@PostMapping("/addMovie")
	public String addMovies(@RequestBody List<Movie> movies) {
		movieRepository.saveAll(movies);
		return "record inserted " + movies.size();
	}
	
	
}
